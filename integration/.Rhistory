# Gene nodes: color by log2FoldChange_for_plot using a two-color gradient
# If highlight=FALSE, log2FoldChange_for_plot=NA => grey80 (na.value below).
geom_node_point(data = node_data_gene,
aes(x = x, y = y, color = log2FoldChange_for_plot,
shape = type, size = type),
alpha = node_alpha) +
scale_shape_manual(values = c("metabolite" = 15,
"pathway" = 17,
"gene" = 19)) +
scale_size_manual(values = c("metabolite" = 6 * node_size_factor,
"pathway" = 4 * node_size_factor,
"gene" = 3 * node_size_factor)) +
# Use a two-color gradient for gene expression
scale_color_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 0, na.value = "grey80",
name = "log2FC") +
scale_edge_width(range = c(0.2, 0.8), guide = "none") +
theme_graph(base_family = "Arial") +
# Add labels (text) for all nodes in black
geom_node_text(data = node_data,
aes(x = x, y = y, label = name),
size = text_size,
repel = TRUE,
color = "black") +
labs(shape = "Node Type", size = "Node Type")
print(p)
create_network_visualization_JH_3 <- function(data,
layout_type = "fr",
node_size_factor = 1,
text_size = 3,
edge_alpha = 0.5,
node_alpha = 0.75,
export_path = "cytoscape_network.graphml",
output_dir = ".") {
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Build node data frames (using only identifier columns)
nodes_X <- data %>%
select(X) %>%
distinct() %>%
mutate(type = "metabolite")
nodes_pathway <- data %>%
select(pathway) %>%
distinct() %>%
mutate(type = "pathway")
nodes_gene <- data %>%
select(gene) %>%
distinct() %>%
mutate(type = "gene")
# Combine all nodes and assign unique IDs
nodes <- bind_rows(
nodes_X %>% rename(name = X),
nodes_pathway %>% rename(name = pathway),
nodes_gene %>% rename(name = gene)
) %>% mutate(id = row_number())
# Build the edge data frames
edges_X_pathway <- data %>%
select(X, pathway, val) %>%
distinct() %>%
rename(from = X, to = pathway)
edges_pathway_gene <- data %>%
select(pathway, gene, val) %>%
distinct() %>%
rename(from = pathway, to = gene)
edges <- bind_rows(
edges_X_pathway,
edges_pathway_gene
) %>%
left_join(nodes %>% select(name, id), by = c("from" = "name")) %>%
rename(from_id = id) %>%
left_join(nodes %>% select(name, id), by = c("to" = "name")) %>%
rename(to_id = id)
# Create the base graph and compute a fixed layout
graph <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
fixed_layout <- create_layout(graph, layout = layout_type)
# fixed_layout is a data frame with columns "x", "y", "name", etc.
# Identify unique comparisons in the data (assumes data has a "comparison" column)
unique_comparisons <- na.omit(unique(data$comparison))
# Loop over each unique comparison to produce a network image
for (comp in unique_comparisons) {
# Determine which nodes (from columns X, pathway, gene) appear for the current comparison,
# and gather the log2FoldChange for gene nodes.
highlight_nodes <- data %>%
filter(comparison == comp) %>%
select(X, pathway, gene, log2FoldChange) %>%
pivot_longer(cols = c(X, pathway, gene), values_to = "node_name") %>%
distinct(node_name) %>%
pull(node_name)
gene_fc <- data %>%
filter(comparison == comp) %>%
select(gene, log2FoldChange) %>%
distinct()
# Merge fixed_layout (with x and y coordinates) with the node attributes and geneFC info.
node_data <- fixed_layout %>%
left_join(as_tibble(graph, what = "nodes"), by = "name") %>%
left_join(gene_fc, by = c("name" = "gene")) %>%
mutate(highlight = name %in% highlight_nodes) %>%
# For gene nodes: if highlighted, retain log2FoldChange for gradient; else NA.
mutate(log2FoldChange_for_plot = ifelse(type == "gene" & highlight, log2FoldChange, NA_real_)) %>%
rowwise() %>%
mutate(node_color = case_when(
type == "metabolite" & highlight ~ "green",
type == "pathway" & highlight ~ "orange",
TRUE ~ "grey80"
)) %>%
ungroup()
# Separate the data for non-gene and gene nodes
node_data_non_gene <- node_data %>% filter(type != "gene")
node_data_gene <- node_data %>% filter(type == "gene")
# Build the ggplot using the fixed layout; x and y now come from node_data.
p <- ggraph(graph, layout = "manual", x = fixed_layout$x, y = fixed_layout$y) +
geom_edge_link(aes(width = val),
alpha = edge_alpha,
color = "grey50",
show.legend = FALSE) +
# Non-gene nodes: use discrete colors from node_color
geom_node_point(data = node_data_non_gene,
aes(x = x, y = y, color = node_color, shape = type, size = type),
alpha = node_alpha) +
# Gene nodes: map log2FoldChange_for_plot onto a gradient (blue for negative, red for positive)
geom_node_point(data = node_data_gene,
aes(x = x, y = y, color = log2FoldChange_for_plot, shape = type, size = type),
alpha = node_alpha) +
scale_shape_manual(values = c("metabolite" = 15, "pathway" = 17, "gene" = 19)) +
scale_size_manual(values = c("metabolite" = 6 * node_size_factor,
"pathway" = 4 * node_size_factor,
"gene" = 3 * node_size_factor)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 0, na.value = "grey80", name = "log2FC") +
scale_edge_width(range = c(0.2, 0.8), guide = "none") +
theme_graph(base_family = "Arial") +
# Add text labels for all nodes
geom_node_text(data = node_data,
aes(x = x, y = y, label = name),
size = text_size,
repel = TRUE,
color = "black") +
labs(shape = "Node Type", size = "Node Type")
# Save the network plot to a file named with the current comparison
file_name <- paste0("network_", comp, ".png")
file_path <- file.path(output_dir, file_name)
ggsave(filename = file_path, plot = p, width = 10, height = 8)
print(p)
}
# Export the complete (uncolored) network as GraphML for Cytoscape
igraph_obj <- as.igraph(graph)
igraph::write_graph(igraph_obj, file = export_path, format = "graphml")
return(list(graph = graph, fixed_layout = fixed_layout))
}
create_network_visualization_JH_2(data, output_dir="output/")
create_network_visualization_JH_3 <- function(data,
layout_type = "fr",
node_size_factor = 1,
text_size = 3,
edge_alpha = 0.5,
node_alpha = 0.75,
export_path = "cytoscape_network.graphml",
output_dir = ".") {
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Build node data frames (using only identifier columns)
nodes_X <- data %>%
select(X) %>%
distinct() %>%
mutate(type = "metabolite")
nodes_pathway <- data %>%
select(pathway) %>%
distinct() %>%
mutate(type = "pathway")
nodes_gene <- data %>%
select(gene) %>%
distinct() %>%
mutate(type = "gene")
# Combine all nodes and assign unique IDs
nodes <- bind_rows(
nodes_X %>% rename(name = X),
nodes_pathway %>% rename(name = pathway),
nodes_gene %>% rename(name = gene)
) %>% mutate(id = row_number())
# Build the edge data frames
edges_X_pathway <- data %>%
select(X, pathway, val) %>%
distinct() %>%
rename(from = X, to = pathway)
edges_pathway_gene <- data %>%
select(pathway, gene, val) %>%
distinct() %>%
rename(from = pathway, to = gene)
edges <- bind_rows(
edges_X_pathway,
edges_pathway_gene
) %>%
left_join(nodes %>% select(name, id), by = c("from" = "name")) %>%
rename(from_id = id) %>%
left_join(nodes %>% select(name, id), by = c("to" = "name")) %>%
rename(to_id = id)
# Create the base graph and compute a fixed layout
graph <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
fixed_layout <- create_layout(graph, layout = layout_type)
# fixed_layout is a data frame with columns "x", "y", "name", etc.
# Identify unique comparisons in the data (assumes data has a "comparison" column)
unique_comparisons <- na.omit(unique(data$comparison))
# Loop over each unique comparison to produce a network image
for (comp in unique_comparisons) {
# Determine which nodes (from columns X, pathway, gene) appear for the current comparison,
# and gather the log2FoldChange for gene nodes.
highlight_nodes <- data %>%
filter(comparison == comp) %>%
select(X, pathway, gene, log2FoldChange) %>%
pivot_longer(cols = c(X, pathway, gene), values_to = "node_name") %>%
distinct(node_name) %>%
pull(node_name)
gene_fc <- data %>%
filter(comparison == comp) %>%
select(gene, log2FoldChange) %>%
distinct()
# Merge fixed_layout (with x and y coordinates) with the node attributes and geneFC info.
node_data <- fixed_layout %>%
left_join(as_tibble(graph, what = "nodes"), by = "name") %>%
left_join(gene_fc, by = c("name" = "gene")) %>%
mutate(highlight = name %in% highlight_nodes) %>%
# For gene nodes: if highlighted, retain log2FoldChange for gradient; else NA.
mutate(log2FoldChange_for_plot = ifelse(type == "gene" & highlight, log2FoldChange, NA_real_)) %>%
rowwise() %>%
mutate(node_color = case_when(
type == "metabolite" & highlight ~ "green",
type == "pathway" & highlight ~ "orange",
TRUE ~ "grey80"
)) %>%
ungroup()
# Separate the data for non-gene and gene nodes
node_data_non_gene <- node_data %>% filter(type != "gene")
node_data_gene <- node_data %>% filter(type == "gene")
# Build the ggplot using the fixed layout; x and y now come from node_data.
p <- ggraph(graph, layout = "manual", x = fixed_layout$x, y = fixed_layout$y) +
geom_edge_link(aes(width = val),
alpha = edge_alpha,
color = "grey50",
show.legend = FALSE) +
# Non-gene nodes: use discrete colors from node_color
geom_node_point(data = node_data_non_gene,
aes(x = x, y = y, color = node_color, shape = type, size = type),
alpha = node_alpha) +
# Gene nodes: map log2FoldChange_for_plot onto a gradient (blue for negative, red for positive)
geom_node_point(data = node_data_gene,
aes(x = x, y = y, color = log2FoldChange_for_plot, shape = type, size = type),
alpha = node_alpha) +
scale_shape_manual(values = c("metabolite" = 15, "pathway" = 17, "gene" = 19)) +
scale_size_manual(values = c("metabolite" = 6 * node_size_factor,
"pathway" = 4 * node_size_factor,
"gene" = 3 * node_size_factor)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 0, na.value = "grey80", name = "log2FC") +
scale_edge_width(range = c(0.2, 0.8), guide = "none") +
theme_graph(base_family = "Arial") +
# Add text labels for all nodes
geom_node_text(data = node_data,
aes(x = x, y = y, label = name),
size = text_size,
repel = TRUE,
color = "black") +
labs(shape = "Node Type", size = "Node Type")
# Save the network plot to a file named with the current comparison
file_name <- paste0("network_", comp, ".png")
file_path <- file.path(output_dir, file_name)
ggsave(filename = file_path, plot = p, width = 10, height = 8)
print(p)
}
# Export the complete (uncolored) network as GraphML for Cytoscape
igraph_obj <- as.igraph(graph)
igraph::write_graph(igraph_obj, file = export_path, format = "graphml")
return(list(graph = graph, fixed_layout = fixed_layout))
}
create_network_visualization_JH_3(data, output_dir="output/")
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Build node data frames (using only identifier columns)
nodes_X <- data %>%
select(X) %>%
distinct() %>%
mutate(type = "metabolite")
nodes_pathway <- data %>%
select(pathway) %>%
distinct() %>%
mutate(type = "pathway")
nodes_gene <- data %>%
select(gene) %>%
distinct() %>%
mutate(type = "gene")
# Combine all nodes and assign unique IDs
nodes <- bind_rows(
nodes_X %>% rename(name = X),
nodes_pathway %>% rename(name = pathway),
nodes_gene %>% rename(name = gene)
) %>% mutate(id = row_number())
# Build the edge data frames
edges_X_pathway <- data %>%
select(X, pathway, val) %>%
distinct() %>%
rename(from = X, to = pathway)
edges_pathway_gene <- data %>%
select(pathway, gene, val) %>%
distinct() %>%
rename(from = pathway, to = gene)
edges <- bind_rows(
edges_X_pathway,
edges_pathway_gene
) %>%
left_join(nodes %>% select(name, id), by = c("from" = "name")) %>%
rename(from_id = id) %>%
left_join(nodes %>% select(name, id), by = c("to" = "name")) %>%
rename(to_id = id)
# Build node data frames (using only identifier columns)
nodes_X <- data %>%
select(X) %>%
distinct() %>%
mutate(type = "metabolite")
nodes_pathway <- data %>%
select(pathway) %>%
distinct() %>%
mutate(type = "pathway")
nodes_gene <- data %>%
select(gene) %>%
distinct() %>%
mutate(type = "gene")
# Combine all nodes and assign unique IDs
nodes <- bind_rows(
nodes_X %>% rename(name = X),
nodes_pathway %>% rename(name = pathway),
nodes_gene %>% rename(name = gene)
) %>% mutate(id = row_number())
# Build the edge data frames
edges_X_pathway <- data %>%
select(X, pathway, val) %>%
distinct() %>%
rename(from = X, to = pathway)
edges_pathway_gene <- data %>%
select(pathway, gene, val) %>%
distinct() %>%
rename(from = pathway, to = gene)
edges <- bind_rows(
edges_X_pathway,
edges_pathway_gene
) %>%
left_join(nodes %>% select(name, id), by = c("from" = "name")) %>%
rename(from_id = id) %>%
left_join(nodes %>% select(name, id), by = c("to" = "name")) %>%
rename(to_id = id)
# Create the base graph and compute a fixed layout
graph <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
fixed_layout <- create_layout(graph, layout = layout_type)
# fixed_layout is a data frame with columns "x", "y", "name", etc.
# Identify unique comparisons in the data (assumes data has a "comparison" column)
unique_comparisons <- na.omit(unique(data$comparison))
comp
# Determine which nodes (from columns X, pathway, gene) appear for the current comparison,
# and gather the log2FoldChange for gene nodes.
highlight_nodes <- data %>%
filter(comparison == comp) %>%
select(X, pathway, gene, log2FoldChange) %>%
pivot_longer(cols = c(X, pathway, gene), values_to = "node_name") %>%
distinct(node_name) %>%
pull(node_name)
gene_fc <- data %>%
filter(comparison == comp) %>%
select(gene, log2FoldChange) %>%
distinct()
# Merge fixed_layout (with x and y coordinates) with the node attributes and geneFC info.
node_data <- fixed_layout %>%
left_join(as_tibble(graph, what = "nodes"), by = "name") %>%
left_join(gene_fc, by = c("name" = "gene")) %>%
mutate(highlight = name %in% highlight_nodes) %>%
# For gene nodes: if highlighted, retain log2FoldChange for gradient; else NA.
mutate(log2FoldChange_for_plot = ifelse(type == "gene" & highlight, log2FoldChange, NA_real_)) %>%
rowwise() %>%
mutate(node_color = case_when(
type == "metabolite" & highlight ~ "green",
type == "pathway" & highlight ~ "orange",
TRUE ~ "grey80"
)) %>%
ungroup()
fixed_layout %>%
left_join(as_tibble(graph, what = "nodes"), by = "name") %>%
left_join(gene_fc, by = c("name" = "gene")) %>%
mutate(highlight = name %in% highlight_nodes)
create_network_visualization_JH_3 <- function(data,
layout_type = "fr",
node_size_factor = 1,
text_size = 3,
edge_alpha = 0.5,
node_alpha = 0.75,
export_path = "cytoscape_network.graphml",
output_dir = ".") {
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Build node data frames (using only identifier columns)
nodes_X <- data %>%
select(X) %>%
distinct() %>%
mutate(type = "metabolite")
nodes_pathway <- data %>%
select(pathway) %>%
distinct() %>%
mutate(type = "pathway")
nodes_gene <- data %>%
select(gene) %>%
distinct() %>%
mutate(type = "gene")
# Combine all nodes and assign unique IDs
nodes <- bind_rows(
nodes_X %>% rename(name = X),
nodes_pathway %>% rename(name = pathway),
nodes_gene %>% rename(name = gene)
) %>% mutate(id = row_number())
# Build the edge data frames
edges_X_pathway <- data %>%
select(X, pathway, val) %>%
distinct() %>%
rename(from = X, to = pathway)
edges_pathway_gene <- data %>%
select(pathway, gene, val) %>%
distinct() %>%
rename(from = pathway, to = gene)
edges <- bind_rows(
edges_X_pathway,
edges_pathway_gene
) %>%
left_join(nodes %>% select(name, id), by = c("from" = "name")) %>%
rename(from_id = id) %>%
left_join(nodes %>% select(name, id), by = c("to" = "name")) %>%
rename(to_id = id)
# Create the base graph and compute a fixed layout
graph <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
fixed_layout <- create_layout(graph, layout = layout_type)
# Identify unique comparisons (assumes data has a 'comparison' column)
unique_comparisons <- na.omit(unique(data$comparison))
for (comp in unique_comparisons) {
# Determine which nodes (from columns X, pathway, gene) are associated with the current comparison
highlight_nodes <- data %>%
filter(comparison == comp) %>%
select(X, pathway, gene, log2FoldChange) %>%
pivot_longer(cols = c(X, pathway, gene), values_to = "node_name") %>%
distinct(node_name) %>%
pull(node_name)
# For gene nodes, capture their log2FoldChange values for this comparison
gene_fc <- data %>%
filter(comparison == comp) %>%
select(gene, log2FoldChange) %>%
distinct()
# Merge the fixed layout (contains x and y) with the node attributes.
# Here, we explicitly select the 'type' attribute to avoid duplicate columns.
node_data <- fixed_layout %>%
left_join(as_tibble(graph, what = "nodes") %>% select(name, type), by = "name") %>%
left_join(gene_fc, by = c("name" = "gene")) %>%
mutate(highlight = name %in% highlight_nodes) %>%
mutate(log2FoldChange_for_plot = ifelse(type == "gene" & highlight, log2FoldChange, NA_real_)) %>%
mutate(node_color = case_when(
type == "metabolite" & highlight ~ "green",
type == "pathway" & highlight ~ "orange",
TRUE ~ "grey80"
))
# Split into non-gene and gene node subsets
node_data_non_gene <- node_data %>% filter(type != "gene")
node_data_gene <- node_data %>% filter(type == "gene")
# Build the ggplot using the fixed layout; x and y now come from node_data.
p <- ggraph(graph, layout = "manual", x = fixed_layout$x, y = fixed_layout$y) +
geom_edge_link(aes(width = val),
alpha = edge_alpha,
color = "grey50",
show.legend = FALSE) +
# Plot non-gene nodes using the discrete colors from node_color
geom_node_point(data = node_data_non_gene,
aes(x = x, y = y, color = node_color, shape = type, size = type),
alpha = node_alpha) +
# Plot gene nodes, coloring by log2FoldChange_for_plot mapped onto a gradient
geom_node_point(data = node_data_gene,
aes(x = x, y = y, color = log2FoldChange_for_plot, shape = type, size = type),
alpha = node_alpha) +
scale_shape_manual(values = c("metabolite" = 15, "pathway" = 17, "gene" = 19)) +
scale_size_manual(values = c("metabolite" = 6 * node_size_factor,
"pathway" = 4 * node_size_factor,
"gene" = 3 * node_size_factor)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 0, na.value = "grey80", name = "log2FC") +
scale_edge_width(range = c(0.2, 0.8), guide = "none") +
theme_graph(base_family = "Arial") +
geom_node_text(data = node_data,
aes(x = x, y = y, label = name),
size = text_size,
repel = TRUE,
color = "black") +
labs(shape = "Node Type", size = "Node Type")
# Save the network plot to a file named with the current comparison value
file_name <- paste0("network_", comp, ".png")
file_path <- file.path(output_dir, file_name)
ggsave(filename = file_path, plot = p, width = 10, height = 8)
print(p)
}
# Export the complete network (without the color customization) as GraphML for Cytoscape
igraph_obj <- as.igraph(graph)
igraph::write_graph(igraph_obj, file = export_path, format = "graphml")
return(list(graph = graph, fixed_layout = fixed_layout))
}
create_network_visualization_JH_3(data, output_dir="output/")
